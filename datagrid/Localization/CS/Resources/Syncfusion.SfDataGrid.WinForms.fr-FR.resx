<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddNewRowText" xml:space="preserve">
    <value>Cliquez ici pour ajouter une nouvelle ligne</value>
    <comment>Add new row text</comment>
  </data>
  <data name="FilterControl_After" xml:space="preserve">
    <value>après</value>
    <comment>Text for After</comment>
  </data>
  <data name="FilterControl_AfterOrEqual" xml:space="preserve">
    <value>après ou égal</value>
    <comment>Text for After or Equal</comment>
  </data>
  <data name="FilterControl_Before" xml:space="preserve">
    <value>avant</value>
    <comment>Text for Before</comment>
  </data>
  <data name="FilterControl_BeforeOrEqual" xml:space="preserve">
    <value>avant ou égal</value>
    <comment>Text for Before or Equal</comment>
  </data>
  <data name="FilterControl_BeginsWith" xml:space="preserve">
    <value>commence par</value>
    <comment>Text for Begins with</comment>
  </data>
  <data name="FilterControl_Blanks" xml:space="preserve">
    <value>des blancs</value>
    <comment>text for Banks</comment>
  </data>
  <data name="FilterControl_Cancel" xml:space="preserve">
    <value>Annuler</value>
    <comment>text for cancel</comment>
  </data>
  <data name="FilterControl_ClearFilter" xml:space="preserve">
    <value>Effacer le filtre</value>
    <comment>Text for Clear Filter</comment>
  </data>
  <data name="FilterControl_Contains" xml:space="preserve">
    <value>contient</value>
    <comment>Text for Contains</comment>
  </data>
  <data name="FilterControl_DateFilter" xml:space="preserve">
    <value>Filtre de date</value>
    <comment>Text for Date Filter</comment>
  </data>
  <data name="FilterControl_DateSortAscending" xml:space="preserve">
    <value>Trier du plus ancien au plus récent</value>
    <comment>Text for Date Sort Ascending</comment>
  </data>
  <data name="FilterControl_DateSortDescending" xml:space="preserve">
    <value>Trier du plus récent au plus ancien</value>
    <comment>Text for Data sort Descending</comment>
  </data>
  <data name="FilterControl_Empty" xml:space="preserve">
    <value>vide</value>
    <comment>Text for Empty</comment>
  </data>
  <data name="FilterControl_EndsWith" xml:space="preserve">
    <value>Finit par</value>
    <comment>Text  for Ends With</comment>
  </data>
  <data name="FilterControl_EnterValidFilterValue" xml:space="preserve">
    <value>Entrez une valeur de filtre valide</value>
    <comment>Text for Enter Valid Filter Value</comment>
  </data>
  <data name="FilterControl_Equals" xml:space="preserve">
    <value>Égale</value>
    <comment>Text for Equals</comment>
  </data>
  <data name="FilterControl_GreaterThan" xml:space="preserve">
    <value>Plus grand que</value>
    <comment>Text for Greater Than</comment>
  </data>
  <data name="FilterControl_GreaterThanorEqual" xml:space="preserve">
    <value>Plus grand ou égal</value>
    <comment>Text for Greater than or Equal</comment>
  </data>
  <data name="FilterControl_LessThan" xml:space="preserve">
    <value>Moins que</value>
    <comment>Text for Less than</comment>
  </data>
  <data name="FilterControl_LessThanorEqual" xml:space="preserve">
    <value>Moins ou égal</value>
    <comment>Text for Less than or Equal</comment>
  </data>
  <data name="FilterControl_NotEmpty" xml:space="preserve">
    <value>Non vide</value>
    <comment>Text for Not empty</comment>
  </data>
  <data name="FilterControl_NotEquals" xml:space="preserve">
    <value>Différent de</value>
    <comment>Text for not Equals</comment>
  </data>
  <data name="FilterControl_NotNull" xml:space="preserve">
    <value>Pas nul</value>
    <comment>Text for Not null</comment>
  </data>
  <data name="FilterControl_Null" xml:space="preserve">
    <value>Nul</value>
    <comment>Text for Nul</comment>
  </data>
  <data name="FilterControl_NumberFilter" xml:space="preserve">
    <value>Filtre numérique</value>
    <comment>Text for Number Filter</comment>
  </data>
  <data name="FilterControl_NumberSortAscending" xml:space="preserve">
    <value>Trier du plus petit au plus grand</value>
    <comment>Text for Number Ascending </comment>
  </data>
  <data name="FilterControl_NumberSortDescending" xml:space="preserve">
    <value>Trier du plus grand au plus petit</value>
    <comment>Text for Number Descending</comment>
  </data>
  <data name="FilterControl_Ok" xml:space="preserve">
    <value>D'accord</value>
    <comment>text for okay</comment>
  </data>
  <data name="FilterControl_SelectAll" xml:space="preserve">
    <value>(Tout sélectionner)</value>
    <comment>Text for Select all</comment>
  </data>
  <data name="FilterControl_TextFilter" xml:space="preserve">
    <value>Filtre de texte</value>
    <comment>Text for Text Filter</comment>
  </data>
  <data name="FilterControl_TextSortAscending" xml:space="preserve">
    <value>Trier de A à Z</value>
    <comment>Text for Text Ascending</comment>
  </data>
  <data name="FilterControl_TextSortDescending" xml:space="preserve">
    <value>Trier Z à A</value>
    <comment>Text for Text Descending</comment>
  </data>
  <data name="FilterControl_And" xml:space="preserve">
    <value>Et</value>
  </data>
  <data name="FilterControl_Or" xml:space="preserve">
    <value>Ou</value>
  </data>
  <data name="GroupPanel_GroupDropAreaText" xml:space="preserve">
    <value>Faites glisser une colonne pour grouper</value>
    <comment>Group Drop Area Text</comment>
  </data>
  <data name="INotifyDataErrorInfo_DefaultErrorMessage" xml:space="preserve">
    <value>Ligne contenant une erreur</value>
    <comment>Only for INotifyDataErrorInfo error for a row. Error message can be changed using the RowValidating event.</comment>
  </data>
  <data name="FilterControl_NoItems" xml:space="preserve">
    <value>Aucun élément</value>
    <comment>Text for items not found</comment>
  </data>
  <data name="FilterControl_DoesNotContain" xml:space="preserve">
    <value>Ne contient pas</value>
    <comment>Text for Does Not Contain</comment>
  </data>
  <data name="FilterControl_DoesNotBeginWith" xml:space="preserve">
    <value>Ne commence pas par</value>
    <comment>Text for does not begin with</comment>
  </data>
  <data name="FilterControl_DoesNotEndWith" xml:space="preserve">
    <value>Ne finit pas par</value>
    <comment>Text for does not end with</comment>
  </data>
  <data name="FilterControl_FilterDescription" xml:space="preserve">
    <value>Sélectionner la ligne où :</value>
    <comment>Text for FilterDescription</comment>
  </data>
  <data name="FilterControl_NoMatch" xml:space="preserve">
    <value>Aucune correspondance</value>
  </data>
</root>